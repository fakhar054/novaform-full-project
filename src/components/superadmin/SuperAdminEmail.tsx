import React, { useState, useEffect } from "react";
import {
  Mail,
  Plus,
  Search,
  Filter,
  Edit3,
  Eye,
  Copy,
  Trash2,
  Send,
  ChevronDown,
  X,
  Check,
  AlertCircle,
  Smartphone,
  Monitor,
  ArrowLeft,
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";

// Removed: import { v4 as uuidv4 } from 'uuid';

// This interface should EXACTLY match your Supabase 'email_template_table' column names
interface SupabaseEmailTemplate {
  id: string; // Assuming Supabase auto-generates this (either UUID or Identity)
  template_name: string;
  description: string;
  type_email: string; // Renamed from 'type' to match 'type_email' in DB
  status: "Active" | "Inactive";
  subject_Line: string;
  from_Name: string;
  from_Email: string;
  trigger: string;
  email_Footer?: string; // Renamed from 'footer' to match 'email_Footer' in DB (and made optional)
  // 'created_at' is auto-generated by DB, no need to include in interface for send/update
}

// For creating new templates, the 'id' will be absent, as it's auto-generated by Supabase.
type NewSupabaseEmailTemplate = Omit<SupabaseEmailTemplate, "id"> & {
  id?: string;
};

export const SuperAdminEmail: React.FC = () => {
  const { toast } = useToast();
  const [view, setView] = useState<"list" | "editor" | "preview">("list");
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState<
    "all" | "active" | "inactive"
  >("all");
  const [selectedTemplate, setSelectedTemplate] =
    useState<NewSupabaseEmailTemplate | null>(null);
  const [previewMode, setPreviewMode] = useState<"desktop" | "mobile">(
    "desktop"
  );
  const [showTestModal, setShowTestModal] = useState(false);
  const [testEmail, setTestEmail] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [autoSaved, setAutoSaved] = useState(false);

  const [dynamicTemplates, setDynamicTemplates] = useState<
    SupabaseEmailTemplate[]
  >([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchTemplates();
  }, []);

  const fetchTemplates = async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from("email_template_table")
      .select("*");

    if (error) {
      console.error("Error fetching templates:", error);
      toast({
        title: "Error",
        description: "Failed to fetch email templates.",
        variant: "destructive",
      });
    } else {
      console.log("Fetched data:", data);
      setDynamicTemplates(data as SupabaseEmailTemplate[]);
    }
    setLoading(false);
  };

  const filteredTemplates = dynamicTemplates.filter((template) => {
    const matchesSearch =
      template.template_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      template.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter =
      filterStatus === "all" || template.status.toLowerCase() === filterStatus;
    return matchesSearch && matchesFilter;
  });

  const handleEditTemplate = (template: SupabaseEmailTemplate) => {
    setSelectedTemplate(template);
    setView("editor");
  };

  const handleNewTemplate = () => {
    const newTemplate: NewSupabaseEmailTemplate = {
      // id is omitted here; it will be auto-generated by Supabase
      template_name: "New Template",
      description: "",
      type_email: "Manual",
      status: "Inactive",
      subject_Line: "",
      from_Name: "NovaFarm Team",
      from_Email: "noreply@novafarm.com",
      trigger: "manual",
      email_Footer:
        "<p>Â© 2024 NovaFarm. All rights reserved.</p><p>If you have any questions, please contact our support team.</p>",
    };
    setSelectedTemplate(newTemplate);
    setView("editor");
  };

  // const handleSaveTemplate = async () => {
  //   if (!selectedTemplate) {
  //     toast({
  //       title: "Error",
  //       description: "No template selected to save.",
  //       variant: "destructive",
  //     });
  //     return;
  //   }

  //   setIsLoading(true);
  //   setAutoSaved(false); // Reset auto-saved status

  //   let error = null;

  //   // Determine if it's an existing template by checking if selectedTemplate.id is truthy
  //   // and if it actually exists in our current list of fetched templates (more robust check)
  //   if (
  //     selectedTemplate.id &&
  //     dynamicTemplates.some((t) => t.id === selectedTemplate.id)
  //   ) {
  //     // It's an existing template, perform an UPDATE
  //     const { id, ...updatePayload } = selectedTemplate; // Exclude 'id' from the payload for update
  //     const { error: updateError } = await supabase
  //       .from("email_template_table")
  //       .update(updatePayload)
  //       .eq("id", id);
  //     error = updateError;
  //   } else {
  //     // It's a new template, perform an INSERT
  //     // We MUST NOT send the 'id' if it's auto-generated by Supabase.
  //     const insertPayload = { ...selectedTemplate };
  //     delete insertPayload.id; // CRITICAL: Remove 'id' for new inserts so Supabase generates it.

  //     const { data, error: insertError } = await supabase
  //       .from("email_template_table")
  //       .insert(insertPayload)
  //       .select(); // Use .select() to get the inserted row with its new ID

  //     error = insertError;
  //     if (data && data.length > 0) {
  //       // Update selectedTemplate with the new ID returned by Supabase
  //       setSelectedTemplate(data[0] as SupabaseEmailTemplate);
  //     }
  //   }

  //   if (error) {
  //     console.error("Error saving template:", error);
  //     toast({
  //       title: "Error",
  //       description: `Failed to save template: ${error.message}`,
  //       variant: "destructive",
  //     });
  //   } else {
  //     toast({
  //       title: "Template Saved",
  //       description: "Email template has been saved successfully.",
  //     });
  //     await fetchTemplates(); // Re-fetch all templates to reflect changes
  //     setAutoSaved(true);
  //     setTimeout(() => setAutoSaved(false), 2000);
  //   }
  //   setIsLoading(false);
  // };

  const handleSaveTemplate = async () => {
    if (!selectedTemplate) {
      toast({
        title: "Error",
        description: "No template selected to save.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    setAutoSaved(false);

    let error = null;

    // Check if this is an update
    const isExisting =
      selectedTemplate.id &&
      dynamicTemplates.some((t) => t.id === selectedTemplate.id);

    if (isExisting) {
      const { id, ...updatePayload } = selectedTemplate;
      const { error: updateError } = await supabase
        .from("email_template_table")
        .update(updatePayload)
        .eq("id", id);
      error = updateError;
    } else {
      // INSERT: remove ID completely and let Supabase generate one
      const { id, ...insertPayload } = selectedTemplate;

      const { data, error: insertError } = await supabase
        .from("email_template_table")
        .insert(insertPayload)
        .select(); // fetch newly inserted row

      error = insertError;
      if (data && data.length > 0) {
        setSelectedTemplate(data[0] as SupabaseEmailTemplate);
      }
    }

    if (error) {
      console.error("Error saving template:", error);
      toast({
        title: "Error",
        description: `Failed to save template: ${error.message}`,
        variant: "destructive",
      });
    } else {
      toast({
        title: "Template Saved",
        description: "Email template has been saved successfully.",
      });
      await fetchTemplates();
      setAutoSaved(true);
      setTimeout(() => setAutoSaved(false), 2000);
    }

    setIsLoading(false);
  };

  const handleSendTest = () => {
    if (!testEmail) return;

    setIsLoading(true);
    // Simulate API call
    setTimeout(() => {
      setIsLoading(false);
      setShowTestModal(false);
      setTestEmail("");
      toast({
        title: "Test Email Sent",
        description: `Test email sent successfully to ${testEmail}`,
      });
    }, 2000);
  };

  const handleDeleteTemplate = async (templateId: string) => {
    if (window.confirm("Are you sure you want to delete this template?")) {
      setIsLoading(true);
      const { error } = await supabase
        .from("email_template_table")
        .delete()
        .eq("id", templateId);

      if (error) {
        console.error("Error deleting template:", error);
        toast({
          title: "Error",
          description: `Failed to delete template: ${error.message}`,
          variant: "destructive",
        });
      } else {
        toast({
          title: "Template Deleted",
          description: "Email template has been deleted successfully.",
        });
        await fetchTemplates(); // Re-fetch templates to update the list
      }
      setIsLoading(false);
    }
  };

  const handleDuplicateTemplate = (template: SupabaseEmailTemplate) => {
    const duplicated: NewSupabaseEmailTemplate = {
      ...template,
      id: undefined, // IMPORTANT: Set id to undefined so Supabase auto-generates a new one
      template_name: `${template.template_name} (Copy)`,
      status: "Inactive", // Duplicated templates are often inactive by default
    };
    setSelectedTemplate(duplicated);
    setView("editor"); // Open in editor to allow immediate saving of the duplicate
    toast({
      title: "Template Duplicated",
      description:
        "Template has been duplicated successfully. Please save to create the new copy.",
    });
  };

  const renderTemplateList = () => (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <Mail className="w-7 h-7 text-[#1C9B7A]" />
            Email Templates
          </h1>
          <p className="text-gray-600 mt-1">
            Manage and customize email templates for automated communications
          </p>
        </div>
        <Button
          onClick={handleNewTemplate}
          className="bg-[#27AE60] hover:bg-[#219A52]"
        >
          <Plus className="w-4 h-4 mr-2" />
          Add New Template
        </Button>
      </div>

      {/* Search and Filter */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <Input
            placeholder="Search templates..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
        <div className="relative">
          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value as any)}
            className="appearance-none bg-white border border-gray-300 rounded-md px-4 py-2 pr-8 focus:outline-none focus:ring-2 focus:ring-[#1C9B7A]"
          >
            <option value="all">All Status</option>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
          </select>
          <ChevronDown className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4 pointer-events-none" />
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
        {loading ? (
          <div className="col-span-full text-center py-8 text-gray-600">
            Loading templates...
          </div>
        ) : filteredTemplates.length === 0 ? (
          <div className="col-span-full text-center py-12">
            <Mail className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              No templates found
            </h3>
            <p className="text-gray-600 mb-4">
              Get started by creating your first email template.
            </p>
            <Button
              onClick={handleNewTemplate}
              className="bg-[#27AE60] hover:bg-[#219A52]"
            >
              <Plus className="w-4 h-4 mr-2" />
              Add New Template
            </Button>
          </div>
        ) : (
          filteredTemplates.map((template) => (
            <Card
              key={template.id}
              className="hover:shadow-lg transition-shadow"
            >
              <CardHeader className="pb-3">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <CardTitle className="text-lg">
                      {template.template_name}
                    </CardTitle>
                    <p className="text-sm text-gray-600 mt-1">
                      {template.description}
                    </p>
                  </div>
                  <span
                    className={`px-2 py-1 rounded-full text-xs font-medium ${
                      template.status === "Active"
                        ? "bg-green-100 text-green-800"
                        : "bg-gray-100 text-gray-800"
                    }`}
                  >
                    {template.status}
                  </span>
                </div>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="space-y-2 text-sm text-gray-600">
                  <div>
                    <strong>Type:</strong> {template.type_email}
                  </div>
                </div>
                <div className="flex items-center gap-2 mt-4 flex-wrap">
                  <div className="flex items-center gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleEditTemplate(template)}
                    >
                      <Edit3 className="w-3 h-3 mr-1" />
                      Edit
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => {
                        setSelectedTemplate(template);
                        setView("preview");
                      }}
                    >
                      <Eye className="w-3 h-3 mr-1" />
                      Preview
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleDeleteTemplate(template.id)}
                      className="text-red-600 hover:text-red-700 hover:border-red-300"
                    >
                      <Trash2 className="w-3 h-3" />
                    </Button>
                  </div>

                  <div className="flex items-center">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleDuplicateTemplate(template)}
                    >
                      <Copy className="w-3 h-3 mr-1" />
                      Duplicate
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </div>
    </div>
  );

  const renderEditor = () => (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button variant="ghost" onClick={() => setView("list")}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Templates
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              {/* Check if the ID exists in the fetched templates to determine if it's an existing one */}
              {selectedTemplate?.id &&
              dynamicTemplates.some((t) => t.id === selectedTemplate.id)
                ? "Edit Template"
                : "New Template"}
            </h1>
            {autoSaved && (
              <div className="flex items-center gap-2 text-sm text-green-600 mt-1">
                <Check className="w-4 h-4" />
                Auto-saved
              </div>
            )}
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" onClick={() => setShowTestModal(true)}>
            <Send className="w-4 h-4 mr-2" />
            Send Test
          </Button>
          <Button
            onClick={() => {
              if (selectedTemplate) {
                setView("preview");
              }
            }}
            variant="outline"
          >
            <Eye className="w-4 h-4 mr-2" />
            Preview
          </Button>
          <Button
            onClick={handleSaveTemplate}
            disabled={isLoading}
            className="bg-[#27AE60] hover:bg-[#219A52]"
          >
            {isLoading ? "Saving..." : "Save Template"}
          </Button>
        </div>
      </div>

      {/* Editor Form */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Template Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  Template Name
                </label>
                <Input
                  value={selectedTemplate?.template_name || ""}
                  onChange={(e) =>
                    setSelectedTemplate((prev) =>
                      prev ? { ...prev, template_name: e.target.value } : null
                    )
                  }
                  placeholder="Enter template name"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">
                  Description
                </label>
                <Input
                  value={selectedTemplate?.description || ""}
                  onChange={(e) =>
                    setSelectedTemplate((prev) =>
                      prev ? { ...prev, description: e.target.value } : null
                    )
                  }
                  placeholder="Brief description of this template"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-2">
                    Status
                  </label>
                  <select
                    value={selectedTemplate?.status || "Inactive"}
                    onChange={(e) =>
                      setSelectedTemplate((prev) =>
                        prev
                          ? {
                              ...prev,
                              status: e.target.value as "Active" | "Inactive",
                            }
                          : null
                      )
                    }
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#1C9B7A]"
                  >
                    <option value="Active">Active</option>
                    <option value="Inactive">Inactive</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2">
                    Trigger
                  </label>
                  <select
                    value={selectedTemplate?.trigger || "manual"}
                    onChange={(e) =>
                      setSelectedTemplate((prev) =>
                        prev ? { ...prev, trigger: e.target.value } : null
                      )
                    }
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#1C9B7A]"
                  >
                    <option value="manual">Manual</option>
                    <option value="on_registration">On Registration</option>
                    <option value="on_payment_failed">On Payment Failed</option>
                    <option value="on_invoice_generated">
                      On Invoice Generated
                    </option>
                    <option value="on_subscription_expired">
                      On Subscription Expired
                    </option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2">
                    Type Email
                  </label>
                  <Input
                    value={selectedTemplate?.type_email || ""}
                    onChange={(e) =>
                      setSelectedTemplate((prev) =>
                        prev ? { ...prev, type_email: e.target.value } : null
                      )
                    }
                    placeholder="e.g., Marketing, Transactional"
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Email Settings</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  Subject Line
                </label>
                <Input
                  value={selectedTemplate?.subject_Line || ""}
                  onChange={(e) =>
                    setSelectedTemplate((prev) =>
                      prev ? { ...prev, subject_Line: e.target.value } : null
                    )
                  }
                  placeholder="Email subject line"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-2">
                    From Name
                  </label>
                  <Input
                    value={selectedTemplate?.from_Name || ""}
                    onChange={(e) =>
                      setSelectedTemplate((prev) =>
                        prev ? { ...prev, from_Name: e.target.value } : null
                      )
                    }
                    placeholder="NovaFarm Team"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2">
                    From Email
                  </label>
                  <Input
                    value={selectedTemplate?.from_Email || ""}
                    onChange={(e) =>
                      setSelectedTemplate((prev) =>
                        prev ? { ...prev, from_Email: e.target.value } : null
                      )
                    }
                    placeholder="noreply@novafarm.com"
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Email Footer</CardTitle>
              <p className="text-sm text-gray-600">
                Add legal disclaimers, contact info, or unsubscribe instructions
              </p>
            </CardHeader>
            <CardContent>
              <Textarea
                value={selectedTemplate?.email_Footer || ""}
                onChange={(e) =>
                  setSelectedTemplate((prev) =>
                    prev ? { ...prev, email_Footer: e.target.value } : null
                  )
                }
                placeholder="Â© 2024 NovaFarm. All rights reserved.&#10;If you have any questions, please contact our support team."
                className="min-h-[120px] font-mono text-sm"
              />
              <p className="text-xs text-gray-500 mt-2">
                Footer is optional and will appear at the bottom of your email
              </p>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );

  const renderPreview = () => {
    // Create preview content by replacing template variables with sample data
    const getPreviewContent = (content: string) => {
      if (!content) return "";

      return content
        .replace(/\{\{client_name\}\}/g, "John Doe")
        .replace(/\{\{invoice_total\}\}/g, "$99.00")
        .replace(/\{\{invoice_number\}\}/g, "INV-2024-001")
        .replace(/\{\{company_name\}\}/g, "NovaFarm")
        .replace(/\{\{date\}\}/g, new Date().toLocaleDateString());
    };

    return (
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button
              variant="ghost"
              onClick={() =>
                setView(
                  selectedTemplate?.id &&
                    dynamicTemplates.some((t) => t.id === selectedTemplate.id)
                    ? "editor"
                    : "list"
                )
              }
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back
            </Button>
            <h1 className="text-2xl font-bold text-gray-900">
              Preview: {selectedTemplate?.template_name}
            </h1>
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant={previewMode === "desktop" ? "default" : "outline"}
              size="sm"
              onClick={() => setPreviewMode("desktop")}
            >
              <Monitor className="w-4 h-4 mr-2" />
              Desktop
            </Button>
            <Button
              variant={previewMode === "mobile" ? "default" : "outline"}
              size="sm"
              onClick={() => setPreviewMode("mobile")}
            >
              <Smartphone className="w-4 h-4 mr-2" />
              Mobile
            </Button>
          </div>
        </div>

        {/* Preview */}
        <div className="flex justify-center">
          <div
            className={`bg-white border border-gray-300 rounded-lg shadow-lg ${
              previewMode === "mobile" ? "max-w-sm" : "max-w-2xl w-full"
            }`}
          >
            {/* Email Header */}
            <div className="border-b border-gray-200 p-4 bg-gray-50">
              <div className="text-sm text-gray-600 space-y-1">
                <div>
                  <strong>From:</strong> {selectedTemplate?.from_Name} &lt;
                  {selectedTemplate?.from_Email}&gt;
                </div>
                <div>
                  <strong>Subject:</strong>{" "}
                  {getPreviewContent(selectedTemplate?.subject_Line || "")}
                </div>
              </div>
            </div>

            {/* Footer */}
            {selectedTemplate?.email_Footer && (
              <div className="mt-8 pt-4 border-t border-gray-200">
                <div
                  dangerouslySetInnerHTML={{
                    __html: getPreviewContent(selectedTemplate.email_Footer),
                  }}
                  className="text-xs text-gray-500"
                />
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {view === "list" && renderTemplateList()}
      {view === "editor" && renderEditor()}
      {view === "preview" && renderPreview()}

      {/* Test Email Modal */}
      {showTestModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Send Test Email</h3>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowTestModal(false)}
              >
                <X className="w-4 h-4" />
              </Button>
            </div>

            <div className="space-y-4">
              <div>
                <label
                  htmlFor="testEmail"
                  className="block text-sm font-medium mb-2"
                >
                  Recipient Email
                </label>
                <Input
                  id="testEmail"
                  type="email"
                  value={testEmail}
                  onChange={(e) => setTestEmail(e.target.value)}
                  placeholder="test@example.com"
                />
              </div>
              <div className="flex justify-end gap-2">
                <Button
                  variant="outline"
                  onClick={() => setShowTestModal(false)}
                >
                  Cancel
                </Button>
                <Button onClick={handleSendTest} disabled={isLoading}>
                  {isLoading ? "Sending..." : "Send"}
                </Button>
              </div>
              {isLoading && (
                <div className="flex items-center justify-center gap-2 text-sm text-gray-500">
                  <AlertCircle className="w-4 h-4" /> Sending test email...
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
